{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Clase III - Python: Sintáxis básica III - PCSyH","provenance":[{"file_id":"1BgUC5CLsmYmVu6ZzhG6NCRt4MDpbBIO2","timestamp":1600721156109}],"toc_visible":true,"authorship_tag":"ABX9TyORuq/c8moJrKNxJAYYgS4q"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"0wlnLc0Uo7jO","colab_type":"text"},"source":["# **Python - Sintaxis básica III**\n"]},{"cell_type":"markdown","metadata":{"id":"RtNZNQkgpOyv","colab_type":"text"},"source":["¡Errores y excepciones! \n","\n","En la clase de hoy vamos a trabajar sobre el manejo de errores y excepciones en Python y las palabras reservadas que tiene el lenguaje.\n","\n","- **Errores y excepciones**.\n","  - ¿Qué es un error?\n","  - Error sintáctico.\n","  - Error semántico.\n","  - Excepción simple.\n","\n","- **Palabras reservadas.**\n","  - Palabras reservadas.\n","  - Método help().\n","  - Términos más utilizados.\n"]},{"cell_type":"markdown","metadata":{"id":"e5lf9stap8dR","colab_type":"text"},"source":["## **Errores y excepciones.**"]},{"cell_type":"markdown","metadata":{"id":"Fu5wO_8YvmAB","colab_type":"text"},"source":["### **El camino de los errores.**"]},{"cell_type":"markdown","metadata":{"id":"6K7PY1E8rKPo","colab_type":"text"},"source":["#### **¿Qué es un error? ¿Por qué tenemos errores?**\n","\n","En el mundo de la programación, equivocarse es parte de la rutina diaria en el sentido más literal posible. Cuando escribimos código, debemos tener claridad a la hora de construir nuestros programas. Debido a la *vaguedad* con la que manejamos nuestros lenguajes convencionales, a veces nos cuesta pensar y estructurar sentencias lógicas. \n","\n","Los errores son los momentos en que la consola nos indica que no estamos siendo del todo claros, que nuestro programa no va a funcionar y estamos escribiendo mal lo que queremos ejecutar. En ese sentido, es una herramienta que nos permite mejorar y adquirir precisión. \n","\n","\n","---"]},{"cell_type":"markdown","metadata":{"id":"eoTVQXiFrc1G","colab_type":"text"},"source":["#### **¿Cómo saber que nos equivocamos?**\n","\n","A la hora de equivocarnos, es decir, de escribir mal el programa que queremos ejecutar, Python nos lanzará un aviso, deteniendo el flujo de ejecución. Inmediatamente se interrumpe y nos indica *el tipo de error y el lugar donde se encuentra*. Sí, nunca fue tan fácil encontrar la falla. \n","\n","---"]},{"cell_type":"markdown","metadata":{"id":"WXXDax4dWXke","colab_type":"text"},"source":["#### **Literalmente, la mejor forma de aprender.**\n","\n","Esto que parece un *cliché*, es el camino más adecuado para escribir mejor código. La consola es una tutor que nos ayuda a marcarnos los tipos de errores que tenemos para no volver a repetirnos. En los primeros pasos, es común equivocarse la mayoría de las veces y aprender rápido para no *codear* errónamente. Simplemente, la consola no podrá ejecutar el programa. No hay opción más que hacerlo bien.\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"tBS5vlpdYWOW","colab_type":"text"},"source":["### **Error** *sintáctico*."]},{"cell_type":"markdown","metadata":{"id":"Z2voUhJgvWwZ","colab_type":"text"},"source":["El primer error que podemos señalar - y el más común - es el error _sintáctico_. Es aquel que, como su nombre lo indica, cometemos cuando escribimos mal la sintaxis del programa, por más simple que sea. \n","\n","A veces los errores en programación no son grandes flujos de código que ejecutan mal un procesos, sino simples signos mal colocados o ausentes. Es a veces una *coma o dos puntos*, lo que nos frena toda la maquinaria. "]},{"cell_type":"markdown","metadata":{"id":"N2kQOTJcqgNr","colab_type":"text"},"source":["#### **Ejemplo de errores sintácticos.**"]},{"cell_type":"markdown","metadata":{"id":"UaoRpiNNrlcI","colab_type":"text"},"source":["*1° error sintáctico:*"]},{"cell_type":"code","metadata":{"id":"jjTBvzx0rIkC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":132},"executionInfo":{"status":"error","timestamp":1600792386083,"user_tz":180,"elapsed":733,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"db3b915c-b385-481e-a2df-024a4994c44c"},"source":["#Error al querer imprimir por pantalla una cadena.\n","print(\"Hola)"],"execution_count":81,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-81-72d4841e8ba6>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    print(\"Hola)\u001b[0m\n\u001b[0m                ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m EOL while scanning string literal\n"]}]},{"cell_type":"markdown","metadata":{"id":"IlWQzCIJtbcP","colab_type":"text"},"source":["Si observamos el _output_ por pantalla, vamos a ver una serie de información para guiarnos en la solución.\n","\n","1. **Ubicación del error**: El error se encuentra en \"line 1\" de la celda de código.\n","2. **Texto del error**: El conjunto de código donde se identifica el error.\n","3. **Tipo de error**: Nos indica en este caso que es un \"SyntaxError\" y la falla.\n","5. **Ayuda**: Nos permite buscarlo en *Stack Overflow* si no sabemos solucionarlo. "]},{"cell_type":"markdown","metadata":{"id":"tdEPdORZumCz","colab_type":"text"},"source":["*2° error sintáctico:*"]},{"cell_type":"code","metadata":{"id":"cnFM58kgusYp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":132},"executionInfo":{"status":"error","timestamp":1600792445782,"user_tz":180,"elapsed":853,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"1966ff15-26e1-4186-a414-aa8dff5a359a"},"source":["#Error en una estructura de almacenamiento.\n","lista = [1,2,3,,4]"],"execution_count":84,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-84-2c7b8e17d398>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    lista = [1,2,3,,4]\u001b[0m\n\u001b[0m                   ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"markdown","metadata":{"id":"HaZkHi6KvST7","colab_type":"text"},"source":["Volvemos a tener un mensaje que frena la ejecución del código y nos indica los lugares donde se encuentra el error, el tipo de error y la falla."]},{"cell_type":"markdown","metadata":{"id":"yEQVCodOvH8d","colab_type":"text"},"source":["*3° error sintáctico*:"]},{"cell_type":"code","metadata":{"id":"Qkr5XhnCua1n","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":132},"executionInfo":{"status":"error","timestamp":1600792585639,"user_tz":180,"elapsed":1079,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"dfa6f7b7-e8cd-4a1f-d834-7e29c84f0d4d"},"source":["def saludo_condicional(nombres):\n","  for nombre in nombres:\n","    if nombre[0]==\"A\":\n","      print(\"Hola\",nombre)\n","    else\n","      print(\"No saludamos nombres que no empiecen con A\")"],"execution_count":90,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-90-68f37d6358ed>\"\u001b[0;36m, line \u001b[0;32m5\u001b[0m\n\u001b[0;31m    else\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"markdown","metadata":{"id":"4onFc1P5vhS1","colab_type":"text"},"source":["En este caso, con un ejemplo un poco más \"complejo\", utilizamos la función construida anteriormente y nos marca que hay un error sintáctico. Lejos de ser un problema, si miramos la información que nos da el mensaje, vamos a poder detectar específicamente dónde está el error y corregirlo.\n","\n","*Nota 1* | Como vimos anteriormente, por más **minúsculo** que el error sea, la consola detendrá el flujo de ejecución de código y no funcionará hasta que no lo arreglemos."]},{"cell_type":"markdown","metadata":{"id":"nHmozw90waik","colab_type":"text"},"source":["*4° error sintáctico:*"]},{"cell_type":"code","metadata":{"id":"6LCOXUzJwWPy","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":167},"executionInfo":{"status":"error","timestamp":1600792625678,"user_tz":180,"elapsed":954,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"c9a5a606-c3fa-4ec6-b8ba-da0c55f11c1e"},"source":["pint(\"Hola\")"],"execution_count":93,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-93-2306e95e3727>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Hola\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'pint' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"wyQt2rujwj_O","colab_type":"text"},"source":["Particularmente acá escribimos _mal_ un comando de ejecución - print() - y la consola entiende que, como no es una palabra reservada y está _invocada_ como variable, método o función, no la definimos anteriormente y nos señala que **no** le dijimos que es.\n","\n","Como en este caso omitmos una \"r\" del comando \"print()\" aún así, la consola no es capaz de reconocerlo. "]},{"cell_type":"markdown","metadata":{"id":"8STPy70dwHOP","colab_type":"text"},"source":["Los errores sintácticos son los más comunes, y la mayoría de las veces suceden por olvido u omisión de cuestiones pequeñas. Por eso es importante conocer la sintaxis del lenguaje para evitar este tipo de errores."]},{"cell_type":"markdown","metadata":{"id":"klZvaoCZzHPy","colab_type":"text"},"source":["### **Error** *semántico.*"]},{"cell_type":"markdown","metadata":{"id":"5_VwVZm4i7VO","colab_type":"text"},"source":["El 2° error que podemos identificar es el semántico. Este tipo de errores son un poco más complejos ya que no se distinguen tan facilmente y con la ayuda de la consola como en el caso de los errores sintácticos. Este tipo de errores está ligados al uso. Este tipo de errores no \"pinchan\" cuando los ejecutamos, pero que en algún momento, por estar mal construido o definido el programa, puede **no funcionar**.\n"]},{"cell_type":"markdown","metadata":{"id":"bUGoPvbQ1Vao","colab_type":"text"},"source":["#### **Ejemplo de errores semánticos.**"]},{"cell_type":"markdown","metadata":{"id":"2Lq9HWQpyRGh","colab_type":"text"},"source":["*1° error semántico:*"]},{"cell_type":"code","metadata":{"id":"tzQrX5tdyQRr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600792772337,"user_tz":180,"elapsed":977,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"c6f12705-59a7-437d-f165-29565957ec6b"},"source":["#Creamos una lista de elementos.\n","numeros = [1,2,3]\n","\n","#Usamos el método \"pop()\" para retirar el último elemento de la lista. \n","numeros.pop()"],"execution_count":94,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{"tags":[]},"execution_count":94}]},{"cell_type":"code","metadata":{"id":"PryyYxhVr2Qy","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600792786032,"user_tz":180,"elapsed":976,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"984e198a-c943-4950-f062-4b3a74c47232"},"source":["numeros"],"execution_count":95,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2]"]},"metadata":{"tags":[]},"execution_count":95}]},{"cell_type":"code","metadata":{"id":"tLRUbWtnyxhb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600792790283,"user_tz":180,"elapsed":891,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"82fc6bb1-eb7d-491a-800b-d665c4f98da3"},"source":["#Utilizamos el método \"pop()\" para sacar nuevamente el último elemento.\n","numeros.pop()"],"execution_count":96,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{"tags":[]},"execution_count":96}]},{"cell_type":"code","metadata":{"id":"DMcdfcI3zFkC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600792801962,"user_tz":180,"elapsed":967,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"55cc03da-82c8-4934-eac0-803eb4d8bf6c"},"source":["#Volvemos a ejecutarlo.\n","numeros.pop()"],"execution_count":97,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":97}]},{"cell_type":"code","metadata":{"id":"UaVfCQEuzJck","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":184},"executionInfo":{"status":"error","timestamp":1600792805318,"user_tz":180,"elapsed":805,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"46b3a120-5c2b-4a44-a3a7-8ebe98b02133"},"source":["#Última ejecución.\n","numeros.pop()"],"execution_count":98,"outputs":[{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-98-1e55490910fd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Última ejecución.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mnumeros\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mIndexError\u001b[0m: pop from empty list"]}]},{"cell_type":"markdown","metadata":{"id":"DDjbrvYTzRdn","colab_type":"text"},"source":["Finalmente obtenemos un error, debido a que como fuimos ejecutando las celdas anteriores, vacíamos nuestra lista de elementos. Finalmente ejecutamos una operación que no se pudo realizar. La sintaxis de todas las celdas era correcta, pero la semántica de nuestro código no. "]},{"cell_type":"markdown","metadata":{"id":"3--4DAwLzxNm","colab_type":"text"},"source":["En este caso, para vaciar una lista y que no nos salte error, podemos ponder una **condición** como vimos anteriormente."]},{"cell_type":"code","metadata":{"id":"Rke86uPB0Gki","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600792872277,"user_tz":180,"elapsed":685,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}}},"source":["#Volvemos a definir nuestra lista de números con valores.\n","numeros = [1,2,3,4]"],"execution_count":101,"outputs":[]},{"cell_type":"code","metadata":{"id":"ElvYuKCPsItU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600792875847,"user_tz":180,"elapsed":987,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"f34aafc6-ba99-45a3-cbb4-bc297e90c5c3"},"source":["len(numeros)"],"execution_count":102,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{"tags":[]},"execution_count":102}]},{"cell_type":"code","metadata":{"id":"YdWQJ1-Qz9hF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600792919086,"user_tz":180,"elapsed":687,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"8b87ffce-4d13-484e-9a0d-01896528bbd8"},"source":["if len(numeros) > 0:\n","  numeros.pop()\n","  print(numeros)"],"execution_count":106,"outputs":[{"output_type":"stream","text":["[]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xLDrH5_S0qZC","colab_type":"text"},"source":["En este caso, pusimos una condición que restringe la operación del método pop sólamente si la longitud de elementos adentro de nuestra lista es mayor que 0, es decir, si no esta vacía."]},{"cell_type":"markdown","metadata":{"id":"N0CihtYizTqZ","colab_type":"text"},"source":["### **Manejo** *de errores y excepciones.* "]},{"cell_type":"markdown","metadata":{"id":"TVcaKUz5RG4W","colab_type":"text"},"source":["Una *excepción* se puede definir como un bloque de código excepcional que continuará con la ejecución del código más allá que la consola identifique la presencia de un error. \n","\n","En general las excepciones se utilizan cuando reconocemos previamente que hay algo que puede *fallar* en algún momento, pero la falla será corregida *a posteriori* o no tiene la importancia suficiente como para evitar que el código siga su flujo de ejecución.\n","\n","*Nota 2* | El manejo de errores es una herramienta útiles para invocar excepciones ante la sospecha de un posible error. No obstante, no se debe olvidar que son, como su nombre lo indica, estados _excepcionales_."]},{"cell_type":"markdown","metadata":{"id":"fZ07gZY1sDTO","colab_type":"text"},"source":["\n","#### **Sintaxis para una excepción simple.** "]},{"cell_type":"markdown","metadata":{"id":"6hLbxIBcsesl","colab_type":"text"},"source":["Términos reservados para escribir estructuras de manejo de errores.\n","\n","*   \"try:\" --> significa \"intentar\" en inglés. Es la palabra reservada para denotar el código propenso a errores.\n","*   \"except:\" --> A continuacióón se escribe este término con lo que queremos ejecutar si sucede el error.\n"]},{"cell_type":"code","metadata":{"id":"23hFJs9y3kFK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600793131528,"user_tz":180,"elapsed":2476,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"772439a3-ec59-4c27-83ef-b5b4cecca6c3"},"source":["#Ejemplo básico para manejar un error.\n","try: \n","  print(hola)\n","except:\n","  print(\"No definiste la variable\")"],"execution_count":109,"outputs":[{"output_type":"stream","text":["No definiste la variable\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XioCAaWt32aZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":167},"executionInfo":{"status":"error","timestamp":1600793132834,"user_tz":180,"elapsed":941,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"04937d45-4334-4e7b-f5c4-0cb60677278a"},"source":["print(hola)"],"execution_count":110,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-110-49f51bbac2f0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhola\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'hola' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"v9oF9BV930Py","colab_type":"text"},"source":["En este caso vemos como el mismo programa tiene resultados distintos. En el 1° caso generamos un estado de excepción con una ejecución alternativa para **evitar** la interrupción del programa. En el 2° caso, al no encuadrar los comandos en un bloque de excepción, la consola devuelve el error.\n","\n","*Nota 3* | Estos ejemplos son concretos para que veamos la sintaxis y su interacción. Las excepciones son recursos útiles cuando el código goza de mayor complejidad - *más líneas de ejecución* - y un simple error podría frenar la ejecución innecesariamente."]},{"cell_type":"code","metadata":{"id":"OQzSkdUU49K5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1600793225569,"user_tz":180,"elapsed":739,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"6120185a-a65e-4b9e-9b29-82f8599bc82c"},"source":["#Ejemplo básico para manejar un posible error.\n","numeros = [1,2,3,4]\n","\n","try: \n","  print(numeros)\n","except:\n","  print(\"No definiste la variable\")\n","else:\n","  print(\"Todo funcionó perfecto\")"],"execution_count":113,"outputs":[{"output_type":"stream","text":["[1, 2, 3, 4]\n","Todo funcionó perfecto\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TYjzf2_z5SSk","colab_type":"text"},"source":["Por último, agregamos un término de ejecución que se ejecuta si todo funcionó correctamente. En este caso.\n","\n","1. Se \"intentó\" en el 1° término y funcionó correctamente.\n","2. El 2° término quedó anulado ya que no apareció un error.\n","3. El 3° término se ejecutó debido a que el 2° no se cumplió.\n","\n","*Nota 4* | El último término es *opcional* para el manejo de errores. Simplemente es una forma de asegurarse cual de los dos se ejecutó. En este caso, else se ejecutó debido a que no hubo error. "]},{"cell_type":"code","metadata":{"id":"AoFBxSxP6Z-c","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":69},"executionInfo":{"status":"ok","timestamp":1600793283114,"user_tz":180,"elapsed":869,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"5092de04-8142-4e65-8cd2-3db57cbe27cc"},"source":["#Ejemplo con todas las palabras reservadas de un manejo completo.\n","numeros = [1,2,3,4]\n","\n","try: \n","  print(numeros)\n","except:\n","  print(\"No definiste la variable\")\n","else:\n","  print(\"No hubo errores, la variable estaba definida\")\n","finally:\n","  print(\"Final\")"],"execution_count":114,"outputs":[{"output_type":"stream","text":["[1, 2, 3, 4]\n","No hubo errores, la variable estaba definida\n","Final\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"x2xzDAtD7U5F","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1600793314638,"user_tz":180,"elapsed":715,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"45bd7c46-c777-4de6-d44f-9abf1440a6e8"},"source":["#Ejemplo de uso de todo el manejo de error con presencia de error.\n","try: \n","  print(numeros1)\n","except:\n","  print(\"No definiste la variable\")\n","else:\n","  print(\"No hubo errores, la variable estaba definida\")\n","finally:\n","  print(\"Final\")"],"execution_count":115,"outputs":[{"output_type":"stream","text":["No definiste la variable\n","Final\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RKvylejD68nN","colab_type":"text"},"source":["Por último, utilizamos el término reservado \"finally\" que se ejecuta para saber que se cumplió la operación. Tal como su nombre lo indica, es la estructura de ejecución final de todo el bloque de excepción que inicia con \"try\". Los comandos que se tienen adentro se ejecutan no importa cual haya sido el resultado interno.\n","\n","*Nota 5* | Las estructuras de manejo de errores son muy útiles cuando queremos ejecutar loops sobre varios elementos que sabemos que pueden llegar a fallar. De este modo, nos **aseguramos** que el código continue y detectar el error sin interrumpir el proceso. En este sentido, podemos definir todos los pasos que queremos que sucedan hasta el final, y saber cuando finaliza."]},{"cell_type":"markdown","metadata":{"id":"02Bx8aoI8fwp","colab_type":"text"},"source":["## **Palabras reservadas.**\n"]},{"cell_type":"markdown","metadata":{"id":"VBaBBFMho0w1","colab_type":"text"},"source":["\n","Las palabras reservadas del lenguaje son aquellos términos que no pueden utilizarse para nombrar variables y tienen una función o finalidad predefinida. Cada una de ellas tiene una sintaxis definida que debemos respetar para su correcto funcionamiento.  \n","\n","En total, Python tiene 28 términos. La forma más sencilla de consultarlas es, justamente, con un _método_."]},{"cell_type":"code","metadata":{"id":"3mDeo6LA_GUV","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":243},"executionInfo":{"status":"ok","timestamp":1600793696192,"user_tz":180,"elapsed":697,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"98376ebb-5be1-41b5-9fa1-ff884f5456df"},"source":["#Utilizamos el méétodo \"help()\" con el parámetro keywords para el listado de términos que podemos utilizar.\n","#Nos imprime por pantalla el listado completo de términos.\n","help(\"keywords\")"],"execution_count":116,"outputs":[{"output_type":"stream","text":["\n","Here is a list of the Python keywords.  Enter any keyword to get more help.\n","\n","False               def                 if                  raise\n","None                del                 import              return\n","True                elif                in                  try\n","and                 else                is                  while\n","as                  except              lambda              with\n","assert              finally             nonlocal            yield\n","break               for                 not                 \n","class               from                or                  \n","continue            global              pass                \n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xXpSmrW0_p_g","colab_type":"text"},"source":["Muchos de los términos presentes en el listado los hemos estado utilizando. Sin embargo, para poder entender más, y consultar otros términos desconocidos, podemos utilizar nuevamente el comando *help()*."]},{"cell_type":"code","metadata":{"id":"5eN7i-De_hL-","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":330},"executionInfo":{"status":"ok","timestamp":1600793830937,"user_tz":180,"elapsed":795,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"46840124-ef28-4a5c-a86e-ee7c24ddef76"},"source":["#En este caso queremos que Pythons nos para qué sirve la palabra if. \n","\n","help(\"if\")\n","\n","#Atención, si bien \"if\" es una palabra reservada, a la hora de consultarla a través del método \"help()\", todos los términos se escriben como cadenas"],"execution_count":119,"outputs":[{"output_type":"stream","text":["The \"if\" statement\n","******************\n","\n","The \"if\" statement is used for conditional execution:\n","\n","   if_stmt ::= \"if\" expression \":\" suite\n","               (\"elif\" expression \":\" suite)*\n","               [\"else\" \":\" suite]\n","\n","It selects exactly one of the suites by evaluating the expressions one\n","by one until one is found to be true (see section Boolean operations\n","for the definition of true and false); then that suite is executed\n","(and no other part of the \"if\" statement is executed or evaluated).\n","If all expressions are false, the suite of the \"else\" clause, if\n","present, is executed.\n","\n","Related help topics: TRUTHVALUE\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TW4WxdKeBEsq","colab_type":"text"},"source":["Estos términos son estructurales y genéricos a la hora de escribir código. Optimizar nuestro manejo de ellos nos permitirá *codear* mejor. Si bien muchos de ellos son poco usuales, hay algunos de ellos que son imprescindibles."]},{"cell_type":"markdown","metadata":{"id":"n0YZ3DiLA2zu","colab_type":"text"},"source":["### **La expresión** *lambda.*"]},{"cell_type":"markdown","metadata":{"id":"zxp_S4k41g_F","colab_type":"text"},"source":["La expresión *lambda* es lo que se conoce en programación como función anónima. Es una forma de escribir funciones de manera más simple economizando la cantidad de código que se escribe."]},{"cell_type":"markdown","metadata":{"id":"FyuaF0vi19IQ","colab_type":"text"},"source":["#### **¿Cuándo una lambda?**\n","\n","En generla la utilizamos cuando la necesidad no es tan importante para su reutilización más allá del bloque en que estemos escribiendo nuestro programagrama y la operación no demande un alto nivel de complejidad."]},{"cell_type":"markdown","metadata":{"id":"4zr0KvT82uRW","colab_type":"text"},"source":["#### **Sintaxis de la función.**\n","\n","La función lambda se escribe - generalmente - en una línea, en donde se utiliza la palabra reservada \"lambda\" que nos indica que a continuación escribimos los argumentos de la función y las instrucciones que queremos ejecutar  con ellos."]},{"cell_type":"code","metadata":{"id":"p0kmks7CAGRp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600794074532,"user_tz":180,"elapsed":890,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"ec812cfe-6cdc-41b5-82d9-0fce51aa42bd"},"source":["#1° ejemplo de función lambda\n","f = lambda x: (((x*2)+4)**10)\n","f(2)"],"execution_count":125,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1073741824"]},"metadata":{"tags":[]},"execution_count":125}]},{"cell_type":"code","metadata":{"id":"ZN-1FHH23lR1","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600794125167,"user_tz":180,"elapsed":904,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"3f52f624-c3ad-4e02-c489-e5043c1643d7"},"source":["#Función convencional.\n","\n","def operacion (x):\n","  return ((x*2)+4)**10\n","\n","operacion(2)"],"execution_count":126,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1073741824"]},"metadata":{"tags":[]},"execution_count":126}]},{"cell_type":"markdown","metadata":{"id":"gqzZPbus39n6","colab_type":"text"},"source":["Como vemos en ambos resultados, podemos escribir lo mismo de las dos formas posibles. Sin embargo, en funciones con instrucciones que no reutilizaremos asiudamente, con una lambda podemos arreglar la necesidad. Tal como se puede observar, es una forma de *economizar* código."]},{"cell_type":"markdown","metadata":{"id":"2Ebeky9TB1zb","colab_type":"text"},"source":["### **Términos** *is, in, and y or.*"]},{"cell_type":"markdown","metadata":{"id":"-9hoXrvn47Va","colab_type":"text"},"source":["#### **is** *(y not)*.\n","\n","Es un operador que comprueba la equivalencia entre dos cantidades. El output que obtendremos de estos resultados es un valor booleano de acuerdo a la condición de lo que busquemos comprobar.\n"]},{"cell_type":"code","metadata":{"id":"gywI53hI46z6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600794191480,"user_tz":180,"elapsed":847,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"47440c9f-04bd-448f-d8fc-bca2735d02f5"},"source":["#1° ejemplo de validación positiva.\n","x = 10\n","y = 10\n","\n","x is y"],"execution_count":128,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":128}]},{"cell_type":"code","metadata":{"id":"eTJU_MRs512D","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600794212962,"user_tz":180,"elapsed":893,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"c3eeffe5-d164-47b0-834f-ce82346f559b"},"source":["#2° ejemplo de diferencia.\n","\n","x = 10\n","y = 5 \n","\n","x is not y"],"execution_count":129,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":129}]},{"cell_type":"code","metadata":{"id":"Z4wTvAbH6SNa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600794261619,"user_tz":180,"elapsed":812,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"bbcdd715-4c0a-4e8b-d294-8ea94a9db0fa"},"source":["#3° ejemplo.\n","\n","x = ((10*2)**2)+40*2\n","y = (20*2)+40\n","\n","x is y"],"execution_count":131,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":131}]},{"cell_type":"markdown","metadata":{"id":"7N3dcAwB6P0l","colab_type":"text"},"source":["#### **in**\n","\n","Es una palabra que nos permite hacer una operación en la estructura interna de otro objeto. Podemos simplemente validar la presencia del objeto, o simplemente ver afirmar la ubicación donde se realizará la operación."]},{"cell_type":"code","metadata":{"id":"fKklnP8x7Lhp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600794310939,"user_tz":180,"elapsed":705,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"12bee03e-33bb-4cf8-c65a-bb1c1e94b405"},"source":["#1° ejemplo.\n","\n","x = [1,2,3,4,5,6,7,8,9,10]\n","\n","2 in x"],"execution_count":132,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":132}]},{"cell_type":"code","metadata":{"id":"WYAFuVzS7U1u","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600794341850,"user_tz":180,"elapsed":842,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"3b6815c6-bc6e-4397-8ed1-ee4fbc1b079c"},"source":["#2° ejemplo.\n","x = [\"Rocío\",\"Juan\",\"Mario\"]\n","\n","\"Rocío\" in x"],"execution_count":135,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":135}]},{"cell_type":"markdown","metadata":{"id":"AooeM1UY70fh","colab_type":"text"},"source":["#### **and y or.**\n","\n","Estos términos son dos operadores lógicos que sirven literalmente a la misma función que tienen en el idioma inglés. "]},{"cell_type":"code","metadata":{"id":"Wo6DqxP970Dv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":173},"executionInfo":{"status":"ok","timestamp":1600794458223,"user_tz":180,"elapsed":926,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"a9e01ce2-7c0e-4b65-d1f0-41c4af8a3f19"},"source":["# Ejemplo para el operador and. \n","\n","lista = [10,221,33,412,523,6234,723,600,450]\n","\n","for numero in lista:\n","  if numero < 500 and numero%2 == 0:\n","    print(numero,\"Es par y menor a 500\")\n","  else:\n","    print(numero,\"No es par menor a 500\")"],"execution_count":137,"outputs":[{"output_type":"stream","text":["10 Es par y menor a 500\n","221 No es par menor a 500\n","33 No es par menor a 500\n","412 Es par y menor a 500\n","523 No es par menor a 500\n","6234 No es par menor a 500\n","723 No es par menor a 500\n","600 No es par menor a 500\n","450 Es par y menor a 500\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Kwtp787q-XLN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":173},"executionInfo":{"status":"ok","timestamp":1600794530841,"user_tz":180,"elapsed":991,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"aa5957c5-8f12-407f-8a10-795150796728"},"source":["# Ejemplo para el operador or.\n","for numero in lista:\n","  if numero < 500 or numero%2 == 0:\n","    print(numero,\"Es par o menor a 500\")\n","  else:\n","    print(numero,\"Es impar o mayor a 500\")"],"execution_count":138,"outputs":[{"output_type":"stream","text":["10 Es par o menor a 500\n","221 Es par o menor a 500\n","33 Es par o menor a 500\n","412 Es par o menor a 500\n","523 Es impar o mayor a 500\n","6234 Es par o menor a 500\n","723 Es impar o mayor a 500\n","600 Es par o menor a 500\n","450 Es par o menor a 500\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g6oqqjFE-xOR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":208},"executionInfo":{"status":"ok","timestamp":1600794691609,"user_tz":180,"elapsed":767,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"7fc566c6-485c-4a18-92d6-c66ba8c2f4aa"},"source":["#Ejemplo integrado.\n","\n","lista_1 = [20,2,23,25,78,90,10,11,45,92,120]\n","lista_2 = [21,90,45,11,121,2223,240123,12950,12,324]\n","lista_3 = [90,60,45,11,456,123,34,324]\n","\n","for numero in lista_1:\n","  if numero in lista_2 and lista_3:\n","    print(numero,\"Está en las 3 listas.\")\n","  elif numero in lista_2 or lista_3:\n","    print(numero,\"Esta en 2 listas.\")\n","  else: \n","    print(numero,\"Está en la primera lista solamente\")"],"execution_count":140,"outputs":[{"output_type":"stream","text":["20 Esta en 2 listas.\n","2 Esta en 2 listas.\n","23 Esta en 2 listas.\n","25 Esta en 2 listas.\n","78 Esta en 2 listas.\n","90 Está en las 3 listas.\n","10 Esta en 2 listas.\n","11 Está en las 3 listas.\n","45 Está en las 3 listas.\n","92 Esta en 2 listas.\n","120 Esta en 2 listas.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HJK5fJUYCIzS","colab_type":"text"},"source":["### **Mejorando el control del loop:** *break, continue y pass*."]},{"cell_type":"markdown","metadata":{"id":"5G56fewYBuQt","colab_type":"text"},"source":["#### **Término** *break.*\n","\n","Este término reservado nos permite interrumpir el flujo de una iteración o secuencia de instrucciones cuando se cumple una condición determinada."]},{"cell_type":"code","metadata":{"id":"C-bvgBo4CNqQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":382},"executionInfo":{"status":"ok","timestamp":1600794854550,"user_tz":180,"elapsed":715,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"4050fa6f-4fdf-4f47-b4a4-5b75b298833f"},"source":["#1° Ejemplo sobre una secuencia numérica.\n","\n","for numero in range(20):\n","  if numero is 140:\n","    break\n","\n","  if numero%2 == 0:\n","    print(numero,\"es par\")\n","  else:\n","    print(numero,\"es impar\")\n","\n","print(\"Terminó el loop\")    "],"execution_count":143,"outputs":[{"output_type":"stream","text":["0 es par\n","1 es impar\n","2 es par\n","3 es impar\n","4 es par\n","5 es impar\n","6 es par\n","7 es impar\n","8 es par\n","9 es impar\n","10 es par\n","11 es impar\n","12 es par\n","13 es impar\n","14 es par\n","15 es impar\n","16 es par\n","17 es impar\n","18 es par\n","19 es impar\n","Terminó el loop\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JF7ZZ_oCC_5x","colab_type":"text"},"source":["#### **Término** *continue.*"]},{"cell_type":"markdown","metadata":{"id":"kBoRAKkPDNkO","colab_type":"text"},"source":["A diferencia de break, *continue* nos permite continuar con la ejecución más allá que la condición que estemos evaluando se cumpla."]},{"cell_type":"code","metadata":{"id":"pL2K5C8JCei1","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":364},"executionInfo":{"status":"ok","timestamp":1600782248393,"user_tz":180,"elapsed":919,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"259f7f0b-4884-41ed-93bb-1d8fe28478a5"},"source":["#1° Ejemplo sobre una secuencia numérica.\n","\n","for numero in range(20):\n","  if numero is 15:\n","    continue\n","\n","  if numero%2 == 0:\n","    print(numero,\"es par\")\n","  else:\n","    print(numero,\"es impar\")\n","\n","print(\"Terminó el loop\")    "],"execution_count":43,"outputs":[{"output_type":"stream","text":["0 es par\n","1 es impar\n","2 es par\n","3 es impar\n","4 es par\n","5 es impar\n","6 es par\n","7 es impar\n","8 es par\n","9 es impar\n","10 es par\n","11 es impar\n","12 es par\n","13 es impar\n","14 es par\n","16 es par\n","17 es impar\n","18 es par\n","19 es impar\n","Terminó el loop\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Egfu1xg4GENg","colab_type":"text"},"source":["#### **Término** *pass.*\n","\n","Este término se conoce por su condición de nulidad, que nada sucede cuando se ejecuta. Básicamente lo que hace es ignorar la condición previa evaluando y el loop se ejecuta como si nada hubiese sucedido. \n","\n","\n","*Nota 1* | Generalmente pass se utiliza cuando queremos **solamente declarar** una función o un loop y no nos ejecute un error sintáctico por no escribir comandos"]},{"cell_type":"code","metadata":{"id":"3JyAdM0xGDpU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":208},"executionInfo":{"status":"ok","timestamp":1600795032689,"user_tz":180,"elapsed":659,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"594351dc-3679-41b8-dbf3-a71fc3b56fe6"},"source":["#Ejemplo pass\n","\n","for numero in range(10):\n","  if numero is 5:\n","    pass\n","\n","  if numero%2 == 0:\n","    print(numero,\"es par\")\n","  else:\n","    print(numero,\"es impar\")\n","\n","print(\"Terminó el loop\")"],"execution_count":147,"outputs":[{"output_type":"stream","text":["0 es par\n","1 es impar\n","2 es par\n","3 es impar\n","4 es par\n","5 es impar\n","6 es par\n","7 es impar\n","8 es par\n","9 es impar\n","Terminó el loop\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4mJvs1ql0Q0o","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600795053265,"user_tz":180,"elapsed":688,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}}},"source":["numeros = [1,2,3,4]\n","\n","for numero in numeros:\n","  pass"],"execution_count":148,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"irJE7X9oJy4t","colab_type":"text"},"source":["### **Ejemplo combinado.**"]},{"cell_type":"code","metadata":{"id":"XFsrPmc2ERsg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":382},"executionInfo":{"status":"ok","timestamp":1600795136431,"user_tz":180,"elapsed":683,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"7772aa01-646d-4a87-a4c1-fdf1c58b1c6d"},"source":["#Ejemplo combinado.\n","\n","for numero in range(200):\n","  if numero is 5:\n","    continue\n","\n","  if numero%2 == 0:\n","    print(numero,\"es par\")\n","  else:\n","    print(numero,\"es impar\")\n","\n","  if numero is 20:\n","    break \n","\n","print(\"Terminó el loop\")    "],"execution_count":150,"outputs":[{"output_type":"stream","text":["0 es par\n","1 es impar\n","2 es par\n","3 es impar\n","4 es par\n","6 es par\n","7 es impar\n","8 es par\n","9 es impar\n","10 es par\n","11 es impar\n","12 es par\n","13 es impar\n","14 es par\n","15 es impar\n","16 es par\n","17 es impar\n","18 es par\n","19 es impar\n","20 es par\n","Terminó el loop\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rMEJtMhXJmDq","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":364},"executionInfo":{"status":"ok","timestamp":1600795386817,"user_tz":180,"elapsed":682,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"84010913-bd9e-47e0-cd34-0a636753067d"},"source":["#Ejemplo integrado\n","\n","lista_1 = [1,2,3,4,5,6,7,8,9,10,11,\"hola\",12,\"que tal\",13,14,90,23,40,86,12,\"hola\",\"chau\",\"Alberto\"]\n","\n","for numero in lista_1:\n","\n","  try:\n","\n","    if 0 < numero < 10 and numero%2 is 0:\n","      print(numero,\"es un número positivo par entre 0 y 10\")\n","\n","    elif 10 < numero < 20 and numero%2 is not 0:\n","      print(numero,\"es un número mayor a 10, menor a 20 y es impar\")\n","\n","    else:\n","      print(numero,\"No me interesa evaluar\")\n","\n","  except:\n","      print(numero,\"no es un numero\")\n","  \n","  if numero is 40:\n","    break \n","\n","print(\"Terminó el loop\")"],"execution_count":151,"outputs":[{"output_type":"stream","text":["1 No me interesa evaluar\n","2 es un número positivo par entre 0 y 10\n","3 No me interesa evaluar\n","4 es un número positivo par entre 0 y 10\n","5 No me interesa evaluar\n","6 es un número positivo par entre 0 y 10\n","7 No me interesa evaluar\n","8 es un número positivo par entre 0 y 10\n","9 No me interesa evaluar\n","10 No me interesa evaluar\n","11 es un número mayor a 10, menor a 20 y es impar\n","hola no es un numero\n","12 No me interesa evaluar\n","que tal no es un numero\n","13 es un número mayor a 10, menor a 20 y es impar\n","14 No me interesa evaluar\n","90 No me interesa evaluar\n","23 No me interesa evaluar\n","40 No me interesa evaluar\n","Terminó el loop\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"m6BsUcnWM8_c","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}