{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Clase II - Python: Sintáxis básica II - PCSyH","provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyPrspLV2twDd8z6fwMW+jcG"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"0wlnLc0Uo7jO","colab_type":"text"},"source":["# **Python - Sintaxis básica II**\n"]},{"cell_type":"markdown","metadata":{"id":"RtNZNQkgpOyv","colab_type":"text"},"source":["¡Hoy vamos a trabajar entre iteraciones, condiciones y funciones!\n","\n","En la clase de hoy vamos a trabajar sobre las nociones generales de las palabras reservadas de funciones y la construcción de estructuras de control en Python.\n","\n","- **Estructuras de control y condicional**.\n","  - Estructuras, loops y condiciones.\n","  - If - elif - else.\n","  - While.\n","  - for.\n","\n","- **Métodos y Funciones.**\n","  - ¿Qué son los métodos y funciones?\n","  - Funciones nativas y funciones propias. \n"]},{"cell_type":"markdown","metadata":{"id":"e5lf9stap8dR","colab_type":"text"},"source":["## **Estructuras de control y condicionales.**"]},{"cell_type":"markdown","metadata":{"id":"Fu5wO_8YvmAB","colab_type":"text"},"source":["### **Algunas ideas previas.**"]},{"cell_type":"markdown","metadata":{"id":"6K7PY1E8rKPo","colab_type":"text"},"source":["#### **¿Estructura?**\n","\n","Las estructuras de control se pueden pensar como \"bloques de códigos\" que permiten agrupar, acomodar y ejectuar secuencias de instrucciones de forma **controlada**. \n","\n","Podemos imaginarnos una *secuencia* de cosas cosas que queremos que sucedan bajo determinadas condiciones *n* cantidad de veces. \n","\n","En esta línea, programar nos permite escribir y ejecutar una infinita cantidad de comandos y condiciones que queremos que sucedan *sin* perder el control de los resultados. \n","\n","Por eso las nombramos *estructuras de control*.\n","\n","---"]},{"cell_type":"markdown","metadata":{"id":"eoTVQXiFrc1G","colab_type":"text"},"source":["#### **¿Qué es un loop? Repitiendo, hasta acá...o allá.**\n","\n","En la vida cotidiana solemos toparnos con la idea de entrar en un *loop* cuando decimos que entramos en una secuencia sin salida. En el mundo de la programación, este proceso se puede relacionar con la *repetición condicional e iterativa* a fin de obtener determinados resultados o trabajar sobre un conjunto determinado de datos.\n","\n","En nuestro mundo cotidiano, estamos constantemente aplicado iteraciones y condiciones sin ser concientes. \"Si hago esto, sucede esto..\", \"voy hacer esto hasta que suceda esto..\" \n","\n","Este estilo de procesos, se pueden diseñar programáticamente hasta que se cumpla lo que queremos. Informáticamente, es la posibilidad de ejecutar varias tareas, bajo una lógica predefinida, de forma constante, condicional y controlada. \n","\n","- Constante -> No recibe interrupciones en el proceso.\n","- Condicional -> El proceso se ejecuta de acuerdo a las condiciones impuestas.\n","- Controlada -> El proceso - bien definido - se ejecuta con inicio y final explícito.\n","\n","---"]},{"cell_type":"markdown","metadata":{"id":"WXXDax4dWXke","colab_type":"text"},"source":["#### **¿Para qué sirve?**\n","\n","Las estructuras de control de las herramientas de mayor potencia en la programación. Es la praxis por excelencia de un lenguaje de automatizar un proceso, modificar o crear objetos que de hacerlo de forma manual, tardaríamos muchísimo más tiempo.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"tBS5vlpdYWOW","colab_type":"text"},"source":["### **Bucle** *for*."]},{"cell_type":"markdown","metadata":{"id":"Z2voUhJgvWwZ","colab_type":"text"},"source":["La primera palabra reservada que veremos es el bucle *for*. Este término es una estructura que nos permite repetir el bloque de intrucciones una *n* cantidad de veces. Cada vez que el bucle realiza el proceso se denomian *iteración* y se ejecuta el proceso se ejecuta según la cantidad de elementos que tenga el *recorrido*."]},{"cell_type":"markdown","metadata":{"id":"N2kQOTJcqgNr","colab_type":"text"},"source":["#### **Sintaxis básica del bluce con ejemplo.**"]},{"cell_type":"markdown","metadata":{"id":"UaoRpiNNrlcI","colab_type":"text"},"source":["Vemos un ejemplo de uso para una tarea de forma \"ineficiente\" y cómo lo podemos reconvertir en una manera eficiente utilizado el bucle. \n","\n","*Nota 1* | Si miramos las dos celdas, vemos cóómo en una escribimos *5 veces* el comando que queremos ejecutar, mientras que con la estructura básica del bucle, lo escribimos *1 vez*."]},{"cell_type":"code","metadata":{"id":"jjTBvzx0rIkC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1600222452837,"user_tz":180,"elapsed":981,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"1d997138-a135-4894-e82c-2c43350f2c46"},"source":["#Supongamos que queremos imprimir por pantalla los nombres de unos compañeros.\n","print(\"Mariana\")\n","print(\"Juan\")\n","print(\"Ramiro\")\n","print(\"Raúl\")\n","print(\"Adriana\")"],"execution_count":23,"outputs":[{"output_type":"stream","text":["Mariana\n","Juan\n","Ramiro\n","Raúl\n","Adriana\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dgIwOx8nqeiI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1600222623727,"user_tz":180,"elapsed":1011,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"b1503e07-7734-41b5-c012-50deea013679"},"source":["#Sintaxis básica:\n","\n","#Genero una lista con los nombres.\n","lista_1 = [\"Mariana\",\"Juan\",\"Ramiro\",\"Raúl\",\"Adriana\"]\n","\n","#Creo una estructura de bucle para imprimir los nombres por pantalla:\n","for nombre in lista_1:\n","  print(nombre)"],"execution_count":25,"outputs":[{"output_type":"stream","text":["Mariana\n","Juan\n","Ramiro\n","Raúl\n","Adriana\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1cR-LigNszUJ","colab_type":"text"},"source":["Ahora que vimos un ejemplo, veamos la **sintaxis** paso a paso.\n","\n","1.   Iniciamos escribiendo el término reservado \"for\".\n","2.   Definimos una palabra aleatoria que refiere a los términos dentro de la lista - en este caso el objeto a recorrer  es una lista -.\n","3.  Escribimos el término reservado \"in\" que señala el objeto que se recorrerá internamente. \n","4. Escribimos el objeto a recorrer y cerramos la sentencia con \":\".\n","5. A continuación se detalla en bloque las instrucciones que se quiere aplicar.\n","\n","\n","*Nota 2* | Con respecto al 2°, es importante que la palabra que hace alusión a los objetos internos del bucle tenga una referencia con el tipo de objetos que se va a trabajar. En este caso, como elegimos trabajar con una lista de nombres, definimos la palabra \"iteradora\" como nombre. Sin embargo, vale destacar que no afecta el código, son detalles de \"prolijidad\" y \"buena legibilidad\" en el código generado.  \n","\n"]},{"cell_type":"code","metadata":{"id":"f8iLKTGdumt6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":260},"executionInfo":{"status":"ok","timestamp":1600222688940,"user_tz":180,"elapsed":1130,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"6035ddcb-90a5-49e4-e99e-93c912d541bd"},"source":["#2° Ejemplo con variable numérica:\n","\n","lista_numeros = [1,2,40,4,4,10230,78,9,1210,111,1,201,2303,35050]\n","\n","for numero in lista_numeros:\n","  print(((numero+1)*20)-13)"],"execution_count":27,"outputs":[{"output_type":"stream","text":["27\n","47\n","807\n","87\n","87\n","204607\n","1567\n","187\n","24207\n","2227\n","27\n","4027\n","46067\n","701007\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"klZvaoCZzHPy","colab_type":"text"},"source":["### **Bucle** *while.*"]},{"cell_type":"markdown","metadata":{"id":"5_VwVZm4i7VO","colab_type":"text"},"source":["La palabra reservada *while* es un iterador condicional, similar al funcionamiento del bucle for pero con una diferencia que implica la expresión de una condición que se debe cumplir para ejecutar o finalizar el proceso."]},{"cell_type":"markdown","metadata":{"id":"L4uVFaJwjWd7","colab_type":"text"},"source":["#### **Sintaxis básica del bucle con ejemplo.**"]},{"cell_type":"markdown","metadata":{"id":"JwTvKDL6kGdy","colab_type":"text"},"source":["*Nota 1* | En el ejemplo que vemos a continuacióón observamos que se crea una variable - \"numero = 1\" - , se detalla la condición - \"numero < 15\" - se detallan dos tareas: imprimir por pantalla el número multiplicado y adicionar un \"1\" al número resultante. "]},{"cell_type":"code","metadata":{"id":"M2DVzjMgRY43","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":260},"executionInfo":{"status":"ok","timestamp":1600222914753,"user_tz":180,"elapsed":1020,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"6070c2dc-7a8d-40bc-bd0c-8d1c81ff8f03"},"source":["#1° Ejemplo de uso con el bucle while.\n","\n","#Definimos una variable numérica:\n","numero = 1 \n","\n","#Aplico un bucle condicional para que se ejecuten las tareas siguientes.\n","while numero < 15:\n","  print(numero*2)\n","  numero +=1"],"execution_count":30,"outputs":[{"output_type":"stream","text":["2\n","4\n","6\n","8\n","10\n","12\n","14\n","16\n","18\n","20\n","22\n","24\n","26\n","28\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"oaxYPeeul3_d","colab_type":"text"},"source":["Ya con un ejemplo, podemos repasar la sintaxis, la cual es casi idéntica a la forma de escribir el bucle for, excepto por el término para los elementos internos.\n","\n","1. Se inicializa la expresión condicional escribiendo el término \"while\".\n","2. Se explicita la condición requerida para proceder con el código.\n","3. Se escriben, de forma indentada, las tareas o procesos que se buscan ejecutar.\n","\n","*Nota 2* | Tengamos en cuenta que el proceso o serie de tareas que detallemos se ejecutaran hasta que la condición deje de cumplirse. En ese sentido es importante escribir una condición que en algún momento, por la secuencialidad ejecutada, quede obsoleta. De lo contrario, nos quedará un **loop infinito**"]},{"cell_type":"markdown","metadata":{"id":"N0CihtYizTqZ","colab_type":"text"},"source":["### **Estructuras condicionales** *If - elif - else.* "]},{"cell_type":"markdown","metadata":{"id":"TVcaKUz5RG4W","colab_type":"text"},"source":["Estas palabras reservadas en Python son una forma de escribir una serie de procesos de acuerdo a una o múltiples condiciones que cumplean los objetos y o elementos que pasen por el proceso. \n","\n","Así como vimos en el ejemplo inicial, son \"momentos\" en los cuales el programa que escribimos toma una decisión de acuerdo a la condición detallada. Dependiendo la condición sucedera *una* cosa u *otra*, o ninguna.\n","\n","Estas estructuras permiten cubrir toda una serie de posibilidades a la hora de ejecutar un código, en donde queremos que pasen \"varias\" cosas al momento de ejecutarlo. Como en la vida real, en donde dependiendo de los hechos que suceden tomamos decisiones, acá sucede lo mismo con un **100% de control**. "]},{"cell_type":"markdown","metadata":{"id":"fZ07gZY1sDTO","colab_type":"text"},"source":["\n","#### **Sintaxis básica para una condición simple** "]},{"cell_type":"markdown","metadata":{"id":"6hLbxIBcsesl","colab_type":"text"},"source":["Términos reservados para escribir estructuras condicionales\n","\n","*   \"if\" --> denota el inicio de la condición. Es estrictamente el condicional en inglés.\n","*   \"else\" --> denota la segunda ejecución que se debe dar si no se cumple la condición inicial. \n","* \"elif\" --> es una combinacióón intermedia entre el término \"if\" y \"else\" que utilizamos cuando queremo evaluar una o múltiples condiciones además de la 1° evaluada.\n","\n","*Nota 1* | Las estructuras condicionales empiezan con \"if\" y finalizan con \"else\". En el medio podemos escribir una \"elif\" si tenemos condiciones adicionales que querramos evaluar antes de llegar al final.\n","\n","\n","*Nota 2* | Las condiciones deben ser mutuamente excluyentes. De lo contrario no serían útiles. \n"]},{"cell_type":"code","metadata":{"id":"8M-rJe1rseit","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600223370851,"user_tz":180,"elapsed":961,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"2c6916f5-802b-4b6a-c408-67208b8653d4"},"source":["#1° ejemplo - Condicional de 2 pasos sobre dos variables, con 1 condición posible.  \n","\n","#Definimos dos variables numéricas que queremos comparar.\n","x = 1000\n","y = 10000\n","\n","#Escribimos la 1° primera condición\n","if y < x:\n","#Escribimos la tarea ejecutada si no se cumple la condición\n","#La tarea debe estar indentada.\n","  print(y,\"es menor que\",x)\n","#Escribimos el \"cierre\" del bloque condicional con un else.\n","else: \n","#Detallamos la tarea que queremos que realice si no se cumple la condición del if. \n","  print(y,\"Es mayor que\",x)"],"execution_count":34,"outputs":[{"output_type":"stream","text":["10000 Es mayor que 1000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wPobyfaYsC1a","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600223373099,"user_tz":180,"elapsed":1031,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"4c4f24f3-a328-47a4-e787-26c70bf6e9ae"},"source":["#El código anterior compilado.\n","if y < x:\n","  print(y,\"es menor que\",x)\n","else: \n","  print(y,\"es mayor que\",x)"],"execution_count":35,"outputs":[{"output_type":"stream","text":["10000 es mayor que 1000\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"A4n881UN03kZ","colab_type":"text"},"source":["#### **Sintaxis básica para múltiples condiciones.**"]},{"cell_type":"code","metadata":{"id":"18N_5hhqvViK","colab_type":"code","colab":{}},"source":["#2° ejemplo de 3 pasos con dos vairables, con 2 condiciones posibles.\n","\n","#Definimos dos variables\n","a = 10\n","b = 10\n","\n","#Escribimos la 1° condición\n","if a < b:\n","#Escribimos la tarea que se debe ejecutar si se cumple la 1° condición.\n","  print(a,\"es menor que\",b)\n","#De no cumplirse la primera condición, escribimos una 2° condición que queremos chequear. \n","elif a > b:\n","#Nuevamente, escribimos una tarea que se debe ejecutar si se cumple la condición.\n","  print(a,\"es mayor que\",b)\n","#Finalmente, si no se cumplen las condiciones anteriores, escribimos una tarea que se ejecute.\n","else: \n","  print(a,\"es igual que\",b)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xcC5eCU1wUWp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600223675594,"user_tz":180,"elapsed":1278,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"bce704ee-2652-4666-a291-6364f2ce43dc"},"source":["#El código anterior compilado.\n","a = 120\n","b = 11\n","\n","if a < b:\n","  print(a,\"es menor que\",b)\n","elif a > b:\n","  print(a,\"es mayor que\",b)\n","elif a == b: \n","  print(a,\"es igual que\",b)\n","else: \n","  print(a,\"es igual que\",b)"],"execution_count":41,"outputs":[{"output_type":"stream","text":["120 es mayor que 11\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"gGfILT1ywp-t","colab_type":"text"},"source":["Ahora que con ejemplos vimos paso a paso la estructura del código, podemos repasar su estructura sintáctica en algunos puntos.\n","\n","1. Siempre comienza con un \"if\" seguido por la condición a evaluar. Esta línea de código finaliza con \":\" donde termina la condición.\n","2. A continuación se detalla la tarea que se debe ejecutar **en caso** que la 1° condición se cumpla.\n","3. En caso que se quiera, escribe una 2° estructura condicional a evaluar con las tareas a realizar o se finaliza el bloque con \"else\" y una tarea de finalización. \n","\n","*Nota 3* | Recordemos que la ejecución sucede hasta que se cumple una condición. Una vez que una condición se cumple - en los apartados \"if\" o \"elif\" - finaliza el proceso de ejecución.\n","\n","*Nota 4* | No se puede dejar sin finalizar el proceso de ejecución de código. Siempre debe cerrarse con un else. Se pueden incluir infinidad de condiciones en el proceso con \"elif\" pero deben finalizar con \"else\". Esto sucede debido a que muchas veces no se cumplen las condiciones explicitadas y el proceso de ejecución va hasta el final. \n","\n","*Nota 5* | La mejor formar que encuentro de pensar esto es como un flujo de tareas con condiciones impuestas. \"Si pasa esto, quiero que suceda esto. De lo contrario, esto\".\n","\n"]},{"cell_type":"code","metadata":{"id":"3tRP-niNzAfg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":225},"executionInfo":{"status":"ok","timestamp":1600223846805,"user_tz":180,"elapsed":1020,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"990af0af-ca41-4504-dead-d2fa7f522492"},"source":["#Ejemplo combinado de estructuras de control condicionales e iterativas. \n","\n","numeros = [10,2302,1233,3244,5234,6234,7123,1238,4040, 401120, 1230, 1324123]\n","\n","for numero in numeros:\n","  if numero%2 == 0:\n","    print(numero,\"es par\")\n","  else:\n","    print(numero,\"es impar\")\n","\n","#Repaso de lo que hace el código.\n","\n","#Se crea una lista de valores.\n","#Se inicia un bucle \"for\" que recorre cada \"numero\" en la variable-lista \"numeros\".\n","#La primera sentencia condicional \"if\" evalua la condición detallada: si el resultado divisible por 2 da 0, se pide que imprima por pantalla el número y la cadena \"es par\"\n","#Si no se cumple la primera condición, se va hasta el final con la sentencia \"else\" y se imprime por pantalla la cadena \"es impar\" "],"execution_count":43,"outputs":[{"output_type":"stream","text":["10 es par\n","2302 es par\n","1233 es impar\n","3244 es par\n","5234 es par\n","6234 es par\n","7123 es impar\n","1238 es par\n","4040 es par\n","401120 es par\n","1230 es par\n","1324123 es impar\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"02Bx8aoI8fwp","colab_type":"text"},"source":["## **Métodos y funciones.**"]},{"cell_type":"markdown","metadata":{"id":"5Z1KIFj5Ahhx","colab_type":"text"},"source":["### **¿Qué son los métodos y funciones?**\n"]},{"cell_type":"markdown","metadata":{"id":"BALln0xNiqTa","colab_type":"text"},"source":["#### **Métodos.** "]},{"cell_type":"markdown","metadata":{"id":"jC7yJCoKNhl3","colab_type":"text"},"source":["Los métodos y funciones en Python son bloques de código que usamos para distintas funcionalidades que queremos realizar. Si bien ambas tienen fines similares - podemos simplificar la idea como herramientas que nos sirve para hacer tareas específicas - tienen diferencias sutiles en cuanto a su utilización.\n","\n","\n","A fin de facilitar el entendimiento, podemos sencillamente decir que **los métodos** son acciones o funciones que puede realizar *sobre* un objeto. En esta línea, las funciones también realizan las operaciones sobre los objetos.\n","\n","Entonces..¿Dónde está la diferencia?\n","\n","**En la sintaxis.**"]},{"cell_type":"code","metadata":{"id":"RLSwdonYNXBX","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600224308320,"user_tz":180,"elapsed":955,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}}},"source":["#Sintaxis de un método en particular.\n","\n","#Creo una variable con un valor string \"hola\"\n","nombre = \"hola\"\n","nombres = \"hola hola hola hola hola\""],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"id":"mQU8UoQbfwO9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1600224310680,"user_tz":180,"elapsed":1151,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"d5270558-4988-4c69-bb3b-0da420eef9bc"},"source":["#Utilizo el método \".title()\" que me convierte en mayúsucula cada primera letra de cada palabra.\n","nombres.title()"],"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Hola Hola Hola Hola Hola'"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"id":"Rvd5rmIOfxAz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1600224429156,"user_tz":180,"elapsed":1686,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"90d78b05-8a6e-4cbb-ba87-6228bc6e4ba6"},"source":["#Utilizo el método \".capitalize()\" que convierte en mayúsucula la primera letra de la string\n","nombre.capitalize()"],"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Hola'"]},"metadata":{"tags":[]},"execution_count":49}]},{"cell_type":"code","metadata":{"id":"IIv1bxwefzRP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600224455474,"user_tz":180,"elapsed":1025,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"5192f9d7-e1a6-496f-bd8b-3963cb5e724e"},"source":["#Utilizo el método \".index\" que me da la ubicación del valor que le paso entre paréntesis.\n","nombre.index(\"o\")"],"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":50}]},{"cell_type":"markdown","metadata":{"id":"WRNvx5BKf4Tq","colab_type":"text"},"source":["Vemos con los ejemplos que los métodos tienen la siguiente estructura sintáctica:\n","\n","1. Se escribe el elemento u objeto sobre el cual se pretende modificar.\n","2. A continuación se escribe el método a utilizar con un punto - \".\" que explicita que se trata de un método.\n","3. pegado al término del método van paréntesis que contienen argumentos o parámetros opcionales o necesarios para que funcione el método. \n","\n","*Nota 1* | La diferencia técnica entre los métodos y funciones es que los **métodos tienen una \"aplicación\" o \"funcionalidad\"** asociada a objetos específicos, mientras que las funciones no necesariamente."]},{"cell_type":"code","metadata":{"id":"2XGwF3fxgsXs","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":237},"executionInfo":{"status":"error","timestamp":1600224605797,"user_tz":180,"elapsed":996,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"9c34edf8-77f8-4edf-d98f-5dcad415bdb1"},"source":["#Aplicación de un método a un objeto no correspondido. \n","numero = [1,2,3,4]\n","numero.title()\n","\n","#\"list\" object has no attribute \"title\" --> no soporta el método que se intentó aplicar."],"execution_count":54,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-54-020425d93a69>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Aplicación de un método a un objeto no correspondido.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mnumero\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mnumero\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#\"list\" object has no attribute \"title\" --> no soporta el método que se intentó aplicar.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'list' object has no attribute 'title'"]}]},{"cell_type":"markdown","metadata":{"id":"eaGs8WrEhinP","colab_type":"text"},"source":["*Nota 2* | Los \"argumentos\" o elementos que van entre paréntesis son parámetros que se especifican en el método en caso en que sea necesario detallarlos para el funcionamiento del método. \n","\n","Lo que sucede a veces es que los méétodos necesitan \"más detalle\" por sus funciones, para saber cómo proceder sobre el objeto. Varía de acuerdo a cada método."]},{"cell_type":"code","metadata":{"id":"cOxJcAUvhhYy","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600224765784,"user_tz":180,"elapsed":1077,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"f2a62b67-65e4-4260-c149-17e15cbbbd4a"},"source":["#Método con parámetro necesario.\n","cadena = \"Esto es un método de prueba\"\n","\n","#Utilizo un método que cuenta la cantidad de veces que aparece el argumento que le paso entre paréntesis\n","cadena.count(\"o\")"],"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{"tags":[]},"execution_count":64}]},{"cell_type":"markdown","metadata":{"id":"qdRv5Jb5NjQ5","colab_type":"text"},"source":["#### **Funciones** *built-in* **o nativas.** "]},{"cell_type":"markdown","metadata":{"id":"4YTocOO2jG4g","colab_type":"text"},"source":["Las funciones son porciones de bloques o códigos que se pueden reutilizar para una determinada tarea. Si bien su sintaxis es muy parecida a la de los métodos, vamos a encontrar que en general trabajamos con más parámetros - los detalles entre paréntesis - que los que utilizamos con los métodos. "]},{"cell_type":"code","metadata":{"id":"1_5iNDTojGsK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600224861385,"user_tz":180,"elapsed":945,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"8990d16b-2d25-405e-a88a-8e50a1a5aaad"},"source":["#Ejemplo de función.\n","\n","#La función abs devuelve el valor absoluto de un número\n","abs(-1000)"],"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1000"]},"metadata":{"tags":[]},"execution_count":65}]},{"cell_type":"code","metadata":{"id":"-bBQNgG3Nx4B","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600224885967,"user_tz":180,"elapsed":1407,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"46428db4-3ef6-4b0f-a44a-e79591725005"},"source":["lista = [1,2,3,4,5]\n","\n","#Devuelve el valor máximo de la lista que le pasamos como parámetros.\n","max(lista)"],"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{"tags":[]},"execution_count":67}]},{"cell_type":"markdown","metadata":{"id":"vJm5WltwNyzv","colab_type":"text"},"source":["#### **Construyendo funciones propias.**"]},{"cell_type":"markdown","metadata":{"id":"09PfezcUN_hA","colab_type":"text"},"source":["Sin embargo, la parte más rica de este mundo, consiste en diseñar tus propios elementos, funciones y herramientas. En ese sentido, en Python podemos construir nuestras propias funciones personalizadas para que hagan lo que programemos y a la vez las podamos volver a **reutilizar.** \n","\n","El componente de reutilización es crucial, ya que nos permite generar grandes bloques de códigos enpaquetados en un objeto para aplicar las veces que necesitemos.\n","\n","*¿Qué permite la función?* \n","* Segmentar pequeños procedimientos y aislarlos.\n","* Reutilizarlos en función de la necesidad, incluso para otros procesos."]},{"cell_type":"code","metadata":{"id":"OD4tNSe_lE36","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1600225179925,"user_tz":180,"elapsed":957,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"a585f665-7e33-467e-9a43-a3539fbe3ca0"},"source":["#Función simple con un valor \n","\n","#Creamos la función\n","def saluda_nombre (nombre):\n","  print(\"Hola\",nombre)\n","\n","variable_nombre = \"Alberto\"\n","\n","#Aplicamos en un caso.\n","saluda_nombre(variable_nombre)\n","\n","#Aplicamos en otro caso.\n","variable_nombre_2 = \"Mariana\"\n","saluda_nombre(variable_nombre_2)"],"execution_count":71,"outputs":[{"output_type":"stream","text":["Hola Alberto\n","Hola Mariana\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KPoVL-gjmiDQ","colab_type":"text"},"source":["La sintaxis de la función se puede dividir de la siguiente forma\n","\n","1. La definimos escribiendo la palabra reservada \"def\" seguido del nombre que le asignemos.\n","2. Abrimos paréntesis donde pondremos los \"argumentos\" que serán procesados dentro de la función.\n","3. Escribimos el procedimiento que buscamos hacer."]},{"cell_type":"markdown","metadata":{"id":"vjyCGEabm2HG","colab_type":"text"},"source":["Ahora podemos escribir una función con **estructuras de control iterativa**:"]},{"cell_type":"code","metadata":{"id":"BNLi60KQm1yv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":208},"executionInfo":{"status":"ok","timestamp":1600225345536,"user_tz":180,"elapsed":1025,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"ce3ce813-d0be-4a21-8663-a6471b3a7821"},"source":["#Función con una lista de valores:\n","\n","#Creamos la función\n","def saluda_nombres (nombres):\n","  for x in nombres:\n","    print(\"Hola\",x)\n","\n","variable_nombres = [\"Alberto\",\"Juan\",\"Yusuf\",\"Mariela\",\"Yamila\",\"María\",\"José\",\"Mario\",\"Oscar\",\"Mariam\",\"34\"]\n","\n","\n","#Aplicamos la función y la llamamos escrbiendo el objeto sobre el cual queremos trabajar.\n","saluda_nombres(variable_nombres)"],"execution_count":73,"outputs":[{"output_type":"stream","text":["Hola Alberto\n","Hola Juan\n","Hola Yusuf\n","Hola Mariela\n","Hola Yamila\n","Hola María\n","Hola José\n","Hola Mario\n","Hola Oscar\n","Hola Mariam\n","Hola 34\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GrLcghxKoLbS","colab_type":"text"},"source":["Por último, escribimos una funcióón con *estructura de control iterativa y condicional*: "]},{"cell_type":"code","metadata":{"id":"6-eVgwYumhuH","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1600225577442,"user_tz":180,"elapsed":1098,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"a74291f8-8480-43d3-c181-a44c49a1f545"},"source":["#Función con una lista de valores y condicionales:\n","\n","def saludo_condicional(nombres):\n","  for nombre in nombres:\n","    if nombre[0]==\"A\":\n","      print(\"Hola\",nombre)\n","    else:\n","      print(\"No saludamos nombres que no empiecen con A, estimadx\",nombre)\n","\n","nombres = [\"Alberto\",\"Juan\",\"Aisha\",\"Ramón\",\"Anastasia\",\"Marcelo\"]\n","\n","saludo_condicional(nombres_2)"],"execution_count":77,"outputs":[{"output_type":"stream","text":["No saludamos nombres que no empiecen con A, estimadx Mario\n","No saludamos nombres que no empiecen con A, estimadx Moróón\n","No saludamos nombres que no empiecen con A, estimadx 34\n","Hola ASAD\n","No saludamos nombres que no empiecen con A, estimadx BUSH\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"v0z6iTd-oaFt","colab_type":"text"},"source":["Las funciones son estructuras de código extremadamente útiles, ya que permiten generar procedimientos y guardarlos para ser reutilizados posteriormente. Son muy utilizadas cuando necesitás hacer muchas operaciones similares y necesitás optimizar tiempo."]}]}