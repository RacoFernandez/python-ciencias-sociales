{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Clase I - Python: Sintáxis básica I - PCSyH","provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyMlgqcXACYFy6yf25b30R7i"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"0wlnLc0Uo7jO","colab_type":"text"},"source":["# **Python - Sintaxis básica I**\n"]},{"cell_type":"markdown","metadata":{"id":"RtNZNQkgpOyv","colab_type":"text"},"source":["¡Comenzamos! \n","\n","En esta guía vamos a ver las nociones generales del lenguaje para que podamos empezar a escribir por nuestra cuenta. \n","\n","- **Variables y asignación de valores**.\n","  - ¿Qué son?¿Cómo se definen?\n","  - Asignación de valores.\n","  - Reglas y consideraciones.\n","\n","- **Tipos de datos**.\n","  - Numéricos.\n","  - Textos o cadenas.\n","  - Valores booleanos.\n","  - Estructuras de almacenamiento: diccionarios, listas y tuplas.\n","\n","- **Operaciones por tipos de datos.**\n","  - Numéricas.\n","  - lógica booleana.\n","  - Operaciones sobre estructuras de almacenamiento."]},{"cell_type":"markdown","metadata":{"id":"e5lf9stap8dR","colab_type":"text"},"source":["## **Variables y asignación de valores.**"]},{"cell_type":"markdown","metadata":{"id":"6K7PY1E8rKPo","colab_type":"text"},"source":["#### **¿Qué es una variable?**\n","\n","Cuando escribimos código, trabajamos con objetos \"variables\" a los cuales les asignamos un valor de diverso tipo. Estos valores, son la materia prima con la cual trabajamos en nuestro código.\n","\n","Las variables pueden ser pensadas como \"cajas\" en donde guardamos objetos que, de acuerdo al tipo del objeto que estemos guardando, debemos hacerlo bajo determinadas reglas. \n","\n","---"]},{"cell_type":"markdown","metadata":{"id":"eoTVQXiFrc1G","colab_type":"text"},"source":["#### **¿Cómo se crea una variable?**\n","\n","La sintaxis de una variable consta de 3 elementos. Para crearla correctamente, es necesario escribir estos tres elementos. Si falta alguno de estos elementos, el entorno nos avisará que hay un _error de sintaxis_.\n","\n","- **Nombre**\n","- **Símbolo de asignación**\n","- **Valor**\n","\n","*Nota 1* |  La **forma** en que guardemos el valor de la variable, define el tipo de dato que contiene. Más adelante, veremos los tipos de datos que podemos guardar dentro de ellas. Sin embargo, es importante saber que hay ciertas \"reglas\" de asignación a la hora de crearlas, que de no respetarlas tendremos error de sintaxis.\n","\n","*Nota 2* | Esto que por ahora parece muy técnico, al rato de empezar a trabajar sale intuitivamente. No obstante, para evitar cometer errores, es relevante saber su estructura básica. \n","\n","---"]},{"cell_type":"code","metadata":{"id":"_xV9yHycsFrG","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599596033008,"user_tz":180,"elapsed":1589,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"f0049e9d-b919-409b-80f8-277b28b4fdb6"},"source":["#Uso de Hashtag para comentar código:\n","#Cada vez que querramos dejar un comentario en el código, podemos hacerlo mediante el uso de \"#\".\n","\n","#Creo una variable de nombre \"variable_1\".\n","#Asigno un valor \"string\" o \"cadena\" - más adelante vemos qué significa - mediante el símbolo de igualdad.\n","#Imprimo por pantalla con el comando print()\n","\n","variable_1 = \"Hola Python\"\n","print(variable_1)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Hola Python\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HXQ7tU0U4caj","colab_type":"text"},"source":["#### **Algunas reglas a la hora de crear variables.**\n","\n","1.   Es recomendable que tengan nombres claros y simples que sean fáciles de recordar.\n","2.   Se sugiere que cuando trabajemos con variables relacionadas, tengan una codificación **común** (ej: v_1, v_2).\n","3. No se pueden escribir espacios en variables que contengan más de una palabra en su estructura. Cuando queremos denotar un espacio, se utiliza por convención el \"guión bajo\" (_). \n","4. No se pueden escribir palabras nativas o reservadas de Python como variables. Por ejemplo la palabra \"print\" está prohibida.\n","\n","*Nota 3* | Una palabra reservada es un término propio del lenguaje que no puede ser modificado o alterado para dar un uso diferente del que tiene asignado programáticamente. \n"]},{"cell_type":"code","metadata":{"id":"0_0643FZ4fVO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599596186045,"user_tz":180,"elapsed":1068,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"91f72238-2dc6-4eb7-93c0-bd9867344f9e"},"source":["#Creo una variable denominada \"variable_2\".\n","#Le asigno un valor que, en este caso, es una \"lista\".\n","#Imprimo por pantalla su valor. \n","\n","variable_2 = [1,2,3]\n","print(variable_2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1, 2, 3]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"W98t8HVb8FP8","colab_type":"text"},"source":["Tal como vimos en las celdas de código, creamos dos variables - *variable_1 y variable_2* - que el sistema tiene almacenado en su memoria con valores asignados. En la medida que vayamos trabajando y ejecutemos se nombre, estamos \"llamando\" a la variable para que nos explicite su valor."]},{"cell_type":"code","metadata":{"id":"V6jHW9NC9Ag6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599596192954,"user_tz":180,"elapsed":1079,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"e3f086c9-c630-4a36-fdd0-59938a1eb477"},"source":["#\"Llamada\" a la variable.\n","#Al ejecutar por pantalla, nos devuelve por pantalla el valor que tiene almacenado.\n","variable_2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2, 3]"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"RaDA8Flw-YEg","colab_type":"text"},"source":["*Nota 4* | Las variables pueden ser reescritas y su valor sustituido cada vez que le \"asignemos\" uno nuevo. En este sentido, debemos ser cuidadosxs, dado que la reescritura de una variable elimina la información inicial. "]},{"cell_type":"code","metadata":{"id":"TsR4A62U-Qxf","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599596197312,"user_tz":180,"elapsed":1047,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"b532b7da-0ba7-41d6-fc22-5984c45d360a"},"source":["#Modificación del valor de nuestra variable.\n","#A la variable nomenclada anteriormente como \"variable_2\" con una lista en su valor, la modificamos por una tupla.\n","#Cuando imprimamos por pantalla para ver qué valor contiene, veremos el nuevo asignado.\n","variable_2 = (\"Alberto\",\"Julia\",\"María\")\n","variable_2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('Alberto', 'Julia', 'María')"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"02Bx8aoI8fwp","colab_type":"text"},"source":["## **Tipos de datos.**"]},{"cell_type":"markdown","metadata":{"id":"5Z1KIFj5Ahhx","colab_type":"text"},"source":["**Diferentes valores, diferentes tipos.**\n","\n","En Python podemos crear y manipular valores de diversos tipos y ejecutar diferentes acciones sobre ellos de acuerdo a la finalidad de nuestra tarea. Los tipos de datos más comunes con los cuales contamos, son los **números, cadenas de texto, valores boleanos y estructuras de almacenamiento - listas, tuplas y diccionarios -**. \n","\n","*Nota 1* | Sólo para recordar que los datos que veremos a continuación, se almacenan en las variables que aprendimos a definir anteriormente. "]},{"cell_type":"markdown","metadata":{"id":"U87sFlk1CBHs","colab_type":"text"},"source":["#### **Numéricos.** \n","\n","\n","Tenemos fundamentalmente dos tipos de números: _entero (int)_ y _decimal (float)_. Sobre ellos se realizan operaciones aritméticas clásicas. "]},{"cell_type":"code","metadata":{"id":"gdtZhH2UCA2k","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1599596407420,"user_tz":180,"elapsed":965,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"1c05ae9a-ba1b-4677-b941-eeb3bc170d96"},"source":["#Números \n","\n","#Variable con valor numérico entero o int.\n","numero_entero = 1\n","\n","#Variable con valor numérico decimal o float.\n","numero_decimal = 1.0\n","\n","#En esta operación, pedimos que imprima por pantalla el valor de la variable y el tipo.\n","print(numero_entero,type(numero_entero))\n","print(numero_decimal,type(numero_decimal))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1 <class 'int'>\n","1.0 <class 'float'>\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"G8RNM41DDARc","colab_type":"text"},"source":["#### **Textos o cadenas.** \n","\n","El valor \"string\" tiene como regla ser cualquier valor que vaya entre comillas (\",\") en donde la máquina entiende que lo que hay almacenado es un \"texto\" o una \"cadena\" - string en inglés -. \n"]},{"cell_type":"code","metadata":{"id":"9Cj_BkprEEzZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599596514141,"user_tz":180,"elapsed":1050,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"eda73e37-b44d-44af-fe7f-a713994408c2"},"source":["#Variable con valor de string almacenado con el comillado correspondiente. \n","texto_1 = \"Alberto\"\n","\n","#Imprimimos por pantalla nuevamente el valor de la variable y su tipo con el comando \"type\"\n","print(texto_1,type(texto_1))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Alberto <class 'str'>\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LwMEVRQHEWMM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1599596681450,"user_tz":180,"elapsed":965,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"a819765c-9284-49bb-d798-b8341d258216"},"source":["#Error de sintaxis.\n","\n","texto_2 = Hola Alberto #--> esto no funcionará, ya que no estamos respetando la forma de escribir texto en el lenguaje\n","\n","texto_2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Hola Alberto'"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"hruTBukKEtl2","colab_type":"text"},"source":["*Nota 2* | Una variable, por más que sea un texto, no es una cadena, es un **objeto creado**. A diferencia de esto, una string - casi siempre - debe ir almacenada es una estructura de variable. \n","\n","*Nota 3* | La cadena empieza y termina con las comillas. Si queremos cerrar una string, su valor estará contenido **siempre** entre las comillas."]},{"cell_type":"markdown","metadata":{"id":"-DAul3-lE9e1","colab_type":"text"},"source":["#### **Valores booleanos.**\n","\n","Son aquellas variables que sólo pueden tomar dos valores posibles: *True* (Verdadero) o *False* (Falso). Son utilizados generalmente cuando queremos comprobar la **condición** de operaciones o valores sobre el código que estamos escribiendo. En abstracto, pueden sonar raro, sin embargo, cuando veamos operaciones concretas veremos aplicacionces concretar para familiarizarnos.\n","\n","\n","*Nota 4* | A diferencia de los valores anteriores, en sí no guardan un valor más allá de la condición que expresan en relación a una segunda parte.\n"]},{"cell_type":"code","metadata":{"id":"dZkTmSKqFL6Y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599596763907,"user_tz":180,"elapsed":1009,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"43223e1a-6014-4b53-bd39-993a1a0a0d1c"},"source":["#True --> valor True \n","True \n","\n","#False --> valor False\n","False"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"L00cq1VNG7VZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599596816062,"user_tz":180,"elapsed":961,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"510055d1-7e70-4eff-e0a0-f1e2bea5a84e"},"source":["#Ejemplo de aplicación. Chequear una condición.\n","\n","#Creo dos variables numéricas.\n","variable_1 = 1\n","variable_2 = 3\n","\n","#Comparo mediante un comparador su condición\n","variable_1 < variable_2\n","\n","#El resultado es una condición booleana. \n","#El objeto \"variable_1\" es menor que el objeto \"variable_2\".\n","#Vemos que podemos compararlos debido a que los valores son los mismos y son \"comparables\"(números enteros)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"bVSkDwHqIGGX","colab_type":"text"},"source":["#### **Estructuras de almacenamiento: diccionarios, listas y tuplas.** \n","\n","Así como las variables son \"cajas\" donde se almacena **un** valor, estas estructuras son como cajas donde se pueden guardar **más** valores siguiendo una lógica y reglas predefinidas.\n","\n","Para guardar valores, tenemos 3 tipos de \"contenedores\":\n","\n","1.   *Listas* --> permite almacenar cualquier tipo de objetos.\n","2.   *Tuplas* --> conjunto ordenado e inmutable de elmentos del mismo tipo o de diferentes tipos.\n","3. *Diccionarios* --> estructura que permite guardar un conjunto mediante la forma \"clave-valor\".\n","\n"]},{"cell_type":"code","metadata":{"id":"TT4hqyWmIklN","colab_type":"code","colab":{}},"source":["#Listas\n","\n","#Creamos una variable y los valores los guardamos de una forma definida.\n","#La sintaxis de la lista es mediante \"[]\" y sus valores están separados por \",\".\n","lista_0 = [\"Hola\",\"Qué\",\"Hacer\"]\n","\n","#En este caso, vemos que podemos almacenar distintos tipos de datos.\n","#Sin embargo, no es recomendable almacenar datos muy diferentes dado que limita las operaciones que se pueden realizar sobre él.\n","lista_1 = [1,2,3,1.0,\"Hola\"]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9QCD0LnxJ0dC","colab_type":"code","colab":{}},"source":["#Diccionario\n","\n","#Creamos una variable y los valores los guardamos con la sintaxis de lista.\n","#Su estructura es mediante \"{}\".\n","#El par clave-valor queda definido por los \":\".\n","#La separación de cada par queda definida por \",\".\n","diccionario_0 = {\"a\":1,\"b\":2,\"c\":3,\"d\":4}\n","\n","#Al igual que en el caso de las listas, podemos almacenar diferentes valores y en este caso, estructuras más complejas.\n","diccionario_1 = {\"Nombre\":\"Alberto\",\"Edad\":50,\"Hijos\":[\"Luciano\",\"Facundo\",\"Agustina\"]}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o88aU4LlJ5du","colab_type":"code","colab":{}},"source":["#Tuplas \n","\n","#Creamos la variable y los valores los guardamos con la sintaxis de la tupla.\n","#Su estructura es mediante \"()\".\n","#Su principal particularidad es la inmutabilidad que poseen. Son objetos intransingentes. \n","tupla_1 = (1,2,3,4)\n","\n","#Al igual que en los casos anteriores, podemos guardar valores de tipos diferentes.\n","tupla_2 = (2,3,4,5,\"Hola\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Wkrw15N_Me7A","colab_type":"text"},"source":["## **Operaciones por tipos de datos**."]},{"cell_type":"markdown","metadata":{"id":"4sVpxCehPAw_","colab_type":"text"},"source":["Cada tipo y conjunto de datos tiene operaciones asociadas que se pueden realizar con resultados diferentes. Tenemos distintos \"grupos\" de operaciones que pueden ser aplicadas a - casi - todos, mientras que hay otras más restringidas que sólo pueden ser aplicados ante un determinado tipo de dato o estructura.\n","\n","A su vez, tenemos operaciones que de acuerdo al tipo de dato, ofrecen resultados de salida distintos. Esencialmente hacen lo mismo - por ejemplo la adición en aritmética - pero debido a la naturaleza del dato, el output es diferente.\n","\n"]},{"cell_type":"code","metadata":{"id":"vlk31XUQPkRr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599597221540,"user_tz":180,"elapsed":1006,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"6b7f997b-b8d9-47a2-8973-0a3cf31af4a8"},"source":["#Ejemplo de operación identica variando el tipo de dato.\n","\n","#Creamos dos variables numéricas enteras.\n","v_1 = 2\n","v_2 = 3\n","\n","#Las sumamos mediante el operador \"+\"\n","v_1 + v_2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"id":"ioRQnEI8Ptlh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1599597235520,"user_tz":180,"elapsed":940,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"5c6333fb-1580-4ca9-8277-b8c18da5db5c"},"source":["#Creamos dos variables con valores string.\n","v_3 = \"Hola\"\n","v_4 = \"Julia\"\n","\n","#Aplicamos el mismo operador.\n","v_3 + v_4\n","\n","#Vemos el cambio en el output en la adición debido a la naturaleza del dato."],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'HolaJulia'"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"rflfXdJNRGRQ","colab_type":"text"},"source":["#### **Operaciones numéricas.**\n","\n","En Python podemos hacer operaciones matemáticas y aritméticas muy facilmente convirtiendo muchas veces nuestro *script* en una calculadora muy potente. Las operaciones de suma, resta, multiplicacióón, potencia y división pueden ser ejecutadas facilmente incluso con números y ecuaciones grandes. \n","\n","*Nota 1* | Uno de los grandes beneficios que tiene escribir **programáticamente** las operaciones matemáticas es la posibilidad de *interactuar con variables como si fuesen números*.  \n"]},{"cell_type":"code","metadata":{"id":"qV3iZUTZSVup","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599597314574,"user_tz":180,"elapsed":969,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"462d47d5-88d7-4f5d-e345-b6dac3d691f5"},"source":["#Puedo escribir los números directamente.\n","4 + 4\n","\n","#Puedo escribirlos combinando la estructura, siempre y cuando coincida con el tipo de dato almacenado. \n","x = 10 \n","\n","#Operación de resta.\n","x-4"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"npSdkkrgRO2U","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":121},"executionInfo":{"status":"ok","timestamp":1599597356211,"user_tz":180,"elapsed":910,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"c8c94887-57ff-4a8b-fef2-80a58f0b79db"},"source":["#Variables con valores numéricos.\n","#Voy a imprimir por pantalla las distintas operaciones que realizo entre las dos variables.\n","\n","#Creo las variables que haré interactuar. \n","x = 10\n","y = 10\n","\n","#Suma\n","print(x+y)\n","\n","#Resta \n","print(x-y)\n","\n","#Multiplicación\n","print(x*y)\n","\n","#Módulo \n","print(x%y)\n","\n","#Potencia\n","print(x**y)\n","\n","#División \n","print(x/y)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["20\n","0\n","100\n","0\n","10000000000\n","1.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"SQVwbuf_TGvE","colab_type":"text"},"source":["#### **Operaciones con lógica booleana.**\n","\n","Tal como explicamos anteriormente, la lógica booleana aplicada nos permite chequear la condición de un objeto, valor u operación. En este sentido, hay una serie de operadores que nos permite validar estas condiciones.\n"]},{"cell_type":"code","metadata":{"id":"ZKI923CtThIf","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":86},"executionInfo":{"status":"ok","timestamp":1599597573102,"user_tz":180,"elapsed":947,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"e9e14b36-20d6-4824-cf2d-61e6625dcfe5"},"source":["#Operadores booleanos.\n","#Podemos aplicar y combinar basado en la lógica de las tablas de verdad.\n","\n","#Definimos la variable \"a\" con un valor \"True\".\n","a = True \n","\n","#Usamos el operador \"and\" para chequear dos condiciones. (Lógica de las tablas de verdad)\n","print(\"a y a son\",a and a)\n","\n","#Uso el operador \"==\" para comparar si ambos objetos son iguales.\n","print(\"a y a son\",a == False)\n","\n","#Uso el operador de \"<\" para ver si hay una desigualdad\n","print(\"¿3.1 es mayor que 3?\",3.1>3)\n","\n","#Uso el operador \"!=\" para ver si dos objetos o valores son diferentes\n","#Atención a este caso. ¿Por qué son distintas? \n","print(\"¿a y a son distintas?\",a != \"a\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["a y a son True\n","a y a son False\n","¿3.1 es mayor que 3? True\n","¿a y a son distintas? True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yUHNo6r4U557","colab_type":"text"},"source":["*Nota 1* | La lógica booleana a simple vista no parece muy útil, pero es de las herramienta más potentes para trabajar en programación. Permite validar condiciones de veracidad o falsedad para operar con datos que de lo contrario llevaría mucho tiempo hacerlo manualmente."]},{"cell_type":"markdown","metadata":{"id":"h-rDMGHVVT9H","colab_type":"text"},"source":["#### **Operaciones sobre estructuras de almacenamiento.**\n","\n","Trabajar con conjuntos de datos implica que se pueden realizar consultas más abarcativas o propias de la estructura. Por ejemplo, si queremos acceder a un dato en particular, adicionar uno al conjunto o eliminar mediante una condición específica. En términos específicos, cada estructura tiene su particularidad en las operaciones que se pueden realizar y, como explicamos anteriormente, varía el resultado de acuerdo a la naturaleza del dato contenido."]},{"cell_type":"code","metadata":{"id":"SUyErOasVc8U","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599597751681,"user_tz":180,"elapsed":967,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"c7950b2c-fd5f-439e-d9fd-7c8997a5c7c5"},"source":["#Operaciones con listas.\n","\n","#Creamos una lista numérica.\n","lista_1 = [1,2,10,10,20,30]\n","\n","#Obtenemos el 1° elemento de la lista (ya que le pasamos el que está en posición 0)\n","lista_1[0] \n","\n","#Queremos saber la cantidad de elementos que tiene la lista. \n","len(lista_1) \n","\n","#agregamos un valor a la lista\n","lista_1.append(1)\n","\n","#Imprimimos por pantalla con el nuevo valor al final de la lista.\n","lista_1"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2, 10, 10, 20, 30, 1]"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"id":"U-GYCLcAX_-H","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599597826298,"user_tz":180,"elapsed":965,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"8e2c5938-45a2-4a41-8ab4-d0de1b120e76"},"source":["#Operaciones con diccionarios \n","\n","#Esto crea un diccionario vacío. \n","#A la variable, le asignamos una \"estructura\" vacía.\n","#Por la estructura definida, al crearse entiende el tipo de valor/es que contendrá.\n","diccionario_1 = {} \n","\n","#Creamos un diccionario con tres elementos.\n","diccionario_2 = {\"Alberto\":1,\"María\":2,\"Laura\":3}\n","\n","#Me devuelve el valor que tiene Alberto \n","diccionario_2[\"Alberto\"]\n","\n","#Le asigno un nuevo valor a Laura\n","diccionario_2[\"Laura\"] = 5 \n","\n","#Le pido que me diga el valor de Laura.\n","diccionario_2[\"Alberto\"]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"id":"e06SMC-FY0tT","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599597935138,"user_tz":180,"elapsed":1041,"user":{"displayName":"Zacarias Abuchanab","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhIQg-AIQo1LcSwB2Vkcjwa7zUmAen0WfMI5SzO0w4=s64","userId":"17048485705806854007"}},"outputId":"e774d2c1-45e6-4aca-ed12-34d944008857"},"source":["#Operaciones con tuplas\n","\n","#Creo una tupla vacía\n","tupla_1 = ()\n","\n","#Creo dos tuplas con valores diferentes\n","tupla_2 = (1,2,45,\"hola\")\n","tupla_3 = (2,3,41,\"chau\")\n","\n","#Sumo ambas tuplas\n","tupla_2 + tupla_3\n","\n","#Recordemos que las tuplas son objetos inmutables, es decir, no se puede alterar ni modificar su estructura de almacenamiento.\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 2, 45, 'hola')"]},"metadata":{"tags":[]},"execution_count":50}]}]}